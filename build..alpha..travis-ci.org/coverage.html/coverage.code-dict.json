{"/home/travis/build/npmtest/node-npmtest-scp2/test.js":"/* istanbul instrument in package npmtest_scp2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scp2/lib.npmtest_scp2.js":"/* istanbul instrument in package npmtest_scp2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_scp2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_scp2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-scp2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-scp2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_scp2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_scp2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_scp2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_scp2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_scp2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_scp2.__dirname + '/lib.npmtest_scp2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scp2/node_modules/scp2/index.js":"module.exports = require('./lib/scp');\n","/home/travis/build/npmtest/node-npmtest-scp2/node_modules/scp2/lib/scp.js":"var fs = require('fs');\nvar path = require('path');\nvar glob = require('glob');\nvar async = require('async');\nvar Client = require('./client').Client;\nvar global_client = new Client();\n\nfunction cp2remote(client, src, dest, callback) {\n  client.parse(dest);\n\n  var _upload = function(files, callback) {\n    var rootdir = files[0];\n\n    async.eachSeries(files, function(fpath, done) {\n      fs.stat(fpath, function(err, stats) {\n        if (err) {\n          done(err);\n          return;\n        }\n        if (stats.isFile()) {\n          var fname = path.relative(rootdir, fpath);\n          client.upload(\n            fpath, path.join(client.remote.path, fname), done\n          );\n        } else {\n          done();\n        }\n      });\n    }, function(err) {\n      // never forget to close the session\n      client.on('close', function closeHandler() {\n        callback(err);\n        client.removeListener('close', closeHandler);\n      });\n      client.close();\n    });\n  };\n\n  if (src.indexOf('*') === -1) {\n    fs.stat(src, function(err, stats) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      if (stats.isFile()) {\n        client.upload(src, client.remote.path, function(err) {\n          client.on('close', function closeHandler() {\n            callback(err);\n            client.removeListener('close', closeHandler);\n          });\n          client.close();\n        });\n      } else if (stats.isDirectory()) {\n        glob(src.replace(/\\/$/, '') + '/**/**', function(err, files) {\n          if (err) {\n            callback(err);\n          } else {\n            _upload(files, callback);\n          }\n        });\n      } else {\n        callback('unsupported');\n      }\n    });\n  } else {\n    glob(src, function(err, files) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      _upload(files, callback);\n    });\n  }\n}\n\n\nfunction cp2local(client, src, dest, callback) {\n  var remote = client.parse(src);\n  // only works on single file now\n  // TODO: glob match\n  if (/\\/$/.test(dest)) {\n    dest = dest + path.basename(remote.path);\n  }\n  client.download(remote.path, dest, function () {\n      client.close();\n      callback.apply(this, arguments);\n  });\n}\n\nexports = module.exports = global_client;\n\nexports.Client = Client;\n\nexports.scp = function(src, dest, client, callback) {\n  if (typeof client === 'function') {\n    callback = client;\n    client = new Client();\n  }\n  client.on('error', callback);\n  var parsed = client.parse(src);\n  if (parsed.host && parsed.path) {\n    cp2local(client, parsed, dest, callback);\n  } else {\n    cp2remote(client, src, dest, callback);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-scp2/node_modules/scp2/lib/client.js":"var fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar async = require('async');\nvar EventEmitter = require('events').EventEmitter;\nvar Connection = require('ssh2');\nvar _ = require('lodash');\n\n\nfunction Client(options) {\n  this._options = options || {};\n\n  this.remote = {};\n}\nutil.inherits(Client, EventEmitter);\n\nClient.prototype.defaults = function(options) {\n  if (options) {\n    this._options = options || {};\n  } else {\n    return this._options;\n  }\n};\n\nClient.prototype.parse = function(remote) {\n  if (_.isString(remote)) {\n    // username:password@host:/path/to\n    var regex = /^([a-zA-Z0-9\\-\\.]+)(\\:.*)?@([^:]+):([^:]+:)?(.*)?$/;\n    var m = remote.match(regex);\n    if (!m) return {};\n    var ret = {\n      username: m[1],\n      host: m[3],\n    };\n    if (m[2]) {\n      ret.password = m[2].slice(1);\n    }\n    if (m.length===6 && m[4]) {\n      ret.port = m[4].slice(0,-1);\n    }\n    if (m.length===6 && m[5]) {\n      ret.path = m[5];\n    } else if (m.length===5 && m[4]) {\n      ret.path = m[4];\n    }\n    this.remote = ret;\n    return ret;\n  }\n  this.remote = remote;\n  return remote;\n};\n\nClient.prototype.sftp = function(callback) {\n  if (this.__sftp) {\n    callback(null, this.__sftp);\n    return;\n  }\n\n  var remote = _.defaults(this.remote, this._options);\n  if (this.__ssh) {\n    this.__ssh.connect(remote);\n    return;\n  }\n\n  var self = this;\n  var ssh = new Connection();\n  ssh.on('connect', function() {\n    self.emit('connect');\n  });\n  ssh.on('ready', function() {\n    self.emit('ready');\n\n    ssh.sftp(function(err, sftp) {\n      if (err) throw err;\n      // save for reuse\n      self.__sftp = sftp;\n      callback(err, sftp);\n    });\n  });\n  ssh.on('error', function(err) {\n    self.emit('error', err);\n    callback(err);\n  });\n  ssh.on('end', function() {\n    self.emit('end');\n  });\n  ssh.on('close', function() {\n    self.emit('close');\n  });\n  ssh.on('keyboard-interactive', function(name, instructions, instructionsLang, prompts, finish) {\n    self.emit('keyboard-interactive', name, instructions, instructionsLang, prompts, finish);\n  });\n  ssh.on('change password', function(message, language, done) {\n    self.emit('change password', message, language, done);\n  });\n  ssh.on('tcp connection', function(details, accept, reject) {\n    self.emit('tcp connection', details, accept, reject);\n  });\n  ssh.connect(remote);\n  this.__ssh = ssh;\n};\n\nClient.prototype.close = function() {\n  if (this.__sftp) {\n    this.__sftp.end();\n    this.__sftp = null;\n  }\n  if (this.__ssh) {\n    this.__ssh.end();\n    this.__ssh = null;\n  }\n};\n\n\nClient.prototype.mkdir = function(dir, attrs, callback) {\n  if (_.isFunction(attrs)) {\n    callback = attrs;\n    attrs = undefined;\n  }\n\n  if (attrs) {\n    attrs.mode = getFolderAttr(process.platform, attrs);\n  }\n\n  var self = this;\n  var dirs = [];\n  var exists = false;\n\n  this.sftp(function(err, sftp) {\n    if (err) {\n      return callback(err);\n    }\n\n    // for record log\n    var mkdir = function(dir, callback) {\n      self.emit('mkdir', dir);\n      sftp.mkdir(dir, attrs, callback);\n    };\n\n    async.until(function() {\n      return exists;\n    }, function(done) {\n      // detect if the directory exists\n      sftp.stat(dir, function(err, attr) {\n        if (err) {\n          dirs.push(dir);\n          dir = path.dirname(dir);\n        } else {\n          exists = true;\n        }\n        done();\n      });\n    }, function(err) {\n      if (err) {\n        callback(err);\n      } else {\n        // just like mkdir -p\n        async.eachSeries(dirs.reverse(), mkdir, callback);\n      }\n    });\n\n  });\n};\n\nClient.prototype.write = function(options, callback) {\n  var destination = options.destination;\n  destination = unixy(destination);\n\n  var attrs = options.attrs;\n  var content = options.content;\n  var chunkSize = options.chunkSize || 32768;\n\n  var self = this;\n\n  this.sftp(function(err, sftp) {\n    if (err) {\n      return callback(err);\n    }\n\n    var _write = function(handle) {\n      self.emit('write', options);\n      var length;\n      var lastIndex = 0;\n      var lastCursor = 0;\n\n      if (Buffer.isBuffer(content)) {\n        var contents = [];\n        length = parseInt((content.length - 1) / chunkSize, 10) + 1;\n\n        for (var i = 0 ; i < length; i++) {\n          contents.push(content.slice(i * chunkSize, (i + 1) * chunkSize));\n        }\n        async.eachSeries(contents, function(buf, callback) {\n          self.emit('transfer', buf, lastCursor, length);\n          sftp.write(handle, buf, 0, buf.length, lastIndex, function(err) {\n            lastIndex += buf.length;\n            lastCursor += 1;\n            callback(err);\n          });\n        }, function(err) {\n          sftp.close(handle, callback);\n        });\n      } else if (typeof content === 'number') {\n        // content is a file descriptor\n        length = parseInt((attrs.size - 1) / chunkSize, 10) + 1;\n        var range = new Array(length);\n        async.eachSeries(range, function(pos, callback) {\n          chunkSize = Math.min(chunkSize, attrs.size - lastIndex);\n          if (!chunkSize) {\n            callback(err);\n            return;\n          }\n          var buf = new Buffer(chunkSize);\n          fs.read(content, buf, 0, chunkSize, lastIndex, function(err, byteRead, buf) {\n            self.emit('transfer', buf, lastCursor, length);\n            sftp.write(handle, buf, 0, buf.length, lastIndex, function(err) {\n              lastIndex += buf.length;\n              lastCursor += 1;\n              callback(err);\n            });\n          });\n        }, function(err) {\n          sftp.close(handle, function(err) {\n            fs.close(content, callback);\n          });\n        });\n      } else {\n        throw new Error('Content should be buffer or file descriptor');\n      }\n    };\n\n    sftp.open(destination, 'w', attrs, function(err, handle) {\n      if (err) {\n        // destination is directory\n        destination = path.join(\n          destination, path.basename(options.source)\n        );\n        destination = unixy(destination);\n\n        // for emit write event\n        options.destination = destination;\n        sftp.open(destination, 'w', attrs, function(err, handle) {\n          _write(handle);\n        });\n      } else {\n        _write(handle);\n      }\n    });\n  });\n};\n\nClient.prototype.upload = function(src, dest, callback) {\n  dest = unixy(dest);\n\n  var self = this;\n\n  async.waterfall([\n    function(callback) {\n      fs.stat(src, callback);\n    },\n    function(stat, callback) {\n      if (stat.isDirectory()) return callback(new Error('Can not upload a directory'));\n\n      // Get the attributes of the source directory\n      fs.stat(path.dirname(src), function(err, dirStat) {\n        if(err) return callback(err);\n        self.mkdir(path.dirname(dest), dirStat, function(err){ callback(err, stat) });\n      });\n    },\n    function(stat, callback) {\n      fs.open(src, 'r', function(err, fd) { callback(err, stat, fd); });\n    },\n    function(stat, fd, callback) {\n      self.write({\n        source: src,\n        destination: dest,\n        content: fd,\n        attrs: stat\n      }, callback);\n    }\n  ], function(err) {\n    callback(err);\n  });\n};\n\nClient.prototype.download = function(src, dest, callback) {\n  var self = this;\n\n  self.sftp(function(err,sftp){\n    if (err) {\n      return callback(err);\n    }\n\n    var sftp_readStream = sftp.createReadStream(src);\n    sftp_readStream.on('error', function(err){\n      callback(err);\n    });\n    sftp_readStream.pipe(fs.createWriteStream(dest))\n    .on('close',function(){\n      self.emit('read', src);\n      callback(null);\n    })\n    .on('error', function(err){\n      callback(err);\n    });\n  });\n};\n\nexports = module.exports = new Client();\nexports.Client = Client;\n\nfunction unixy(filepath) {\n  if (process.platform === 'win32') {\n    return filepath.replace(/\\\\/g, '/');\n  }\n  return filepath;\n}\n\nfunction getFolderAttr(platform, attrs) {\n  var DEFAULT_MODE = '0755';\n  if (platform === 'win32') {\n    return DEFAULT_MODE;\n  }\n  if (attrs) {\n    return attrs.mode || DEFAULT_MODE;\n  }\n}\n"}